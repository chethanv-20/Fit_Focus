<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gym Bot</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
    <style>
        body {
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

}

.container {
    background-color: #fff;
    padding: 20px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    border-radius: 5px;
    width: 90%;
    max-width: 600px;
    margin-bottom: 20px;
}

.bot {
    text-align: center;
}

.inner-container {
    text-align: center;
}

.my-img {
    max-width: 150px;
    margin-bottom: 15px;
}

#thinking-text {
    font-size: 1.25rem;
    margin-bottom: 10px;
}

.warning {
    color: red;
    font-size: 0.875rem;
    font-weight: bolder;
}

#conversation-container {
    max-height: 300px;
    overflow-y: auto;
    margin-bottom: 20px;
}

.conversation {
    display: flex;
    flex-direction: column;
    margin-bottom: 10px;
}

.question .bubble {
    background-color: #e1f5fe;
    padding: 10px;
    border-radius: 10px;
    align-self: flex-start;
}

.answer .bubble {
    background-color: #c8e6c9;
    padding: 10px;
    border-radius: 10px;
    align-self: flex-end;
}

#input-container {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    width: 50%;
    gap: 10px;
}

#buttons-container {
    display: flex;
    justify-content: space-between;
    margin-top: 20px;
}

#response {
    margin-top: 20px;
}

.motivation-img {
    width: 100%;
    max-width: 300px;
    margin-bottom: 10px;
}

.tracking {
    text-align: center;
    margin-top: 20px;
}

.track-head h2 {
    margin-bottom: 10px;
}

.track {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 10px;
}

.your_goal {
    flex: 1;
}

footer {
    text-align: center;
    margin-top: 20px;
    padding: 10px;
    background-color: #e1f5fe;
    width: 100%;
}

.loader {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
}

    </style>
</head>
<body>
    <%- include('nav') %>
    <div class="container bot">
        <div class="inner-container">
            <img class="my-img" src="https://chethanv-20.github.io/FitBot/gym-robot.png" alt="gym-robot">
            <h4 id="thinking-text">I'm your virtual fitness assistant</h4>
            <p class="warning">Please provide correct details to get a personalized and accurate plan</p>
        </div>
        <div id="conversation-container">
            <!-- Conversation will be dynamically populated here -->
        </div>
        <div id="input-container">
            <input type="text" id="inputField" class="form-control" style="display: none;" required>
            <select id="selectField" class="form-control" style="display: none;" required>
                <option selected disabled>Choose...</option>
            </select>
            <button id="submitButton" class="btn btn-primary" style="display: none;">Proceed üëç</button>
            <button id="resetButton" class="btn btn-danger" style="display: none;">Restart the conversation</button>
        </div>
        <div id="buttons-container" style="display: none;">
            <p class="warning">The generated plan will be a generic gym and diet plan only. Please consult a professional.</p>
            <button type="button" class="btn btn-primary" id="generatePlan">Generate Plan</button>
            <button type="button" class="btn btn-success" id="motivateMe">Motivate me</button>
        </div>
        <div class="response" id="response"></div>
        <div class="loader" id="loader" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    </div>
    <footer>
        <h6>¬©Ô∏è Fitness Assistant - FitBot</h6>
        <h5>Admin: Chethan</h5>
    </footer>
    <script type="importmap">
        {
            "imports": {
                "@google/generative-ai": "https://esm.run/@google/generative-ai"
            }
        }
    </script>
    <script type="module">
        import { GoogleGenerativeAI } from "@google/generative-ai";
        const API_KEY = "YOUR_API_KEY";
        const genAI = new GoogleGenerativeAI(API_KEY);
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

        const questions = [
            { question: "Hi there, I'm FitBot üí™. Please enter your name", type: "text", id: "name" },
            { question: "Now enter your age üßëüë¥", type: "number", id: "age" },
            { question: "Enter your height (in cm) üßç‚Äç‚ôÇÔ∏è", type: "number", id: "height" },
            { question: "Enter your weight (in kg)", type: "number", id: "weight" },
            { question: "Select duration (months)", type: "select", id: "month", options: ["1", "2", "3"] },
            { question: "Select your gender üßç‚Äç‚ôÄÔ∏èüßç‚Äç‚ôÇÔ∏è", type: "select", id: "gender", options: ["Male", "Female"] },
            { question: "Select your fitness level", type: "select", id: "level", options: ["Beginner", "Intermediate", "Advanced"] },
            { question: "Do you prefer only vegetarian diet? üåøüçâ", type: "select", id: "vegetarian", options: ["Yes", "No"] },
        ];

        let currentQuestionIndex = 0;
        let answers = {};

        function addMessage(content, type) {
            const conversationContainer = document.getElementById("conversation-container");
            const messageElement = document.createElement("div");
            messageElement.className = `${type} conversation`;
            messageElement.innerHTML = `<div class="bubble">${content}</div>`;
            conversationContainer.appendChild(messageElement);
            conversationContainer.scrollTop = conversationContainer.scrollHeight;
        }

        function showNextQuestion() {
            if (currentQuestionIndex < questions.length) {
                const currentQuestion = questions[currentQuestionIndex];
                addMessage(currentQuestion.question, "question");

                const inputField = document.getElementById("inputField");
                const selectField = document.getElementById("selectField");

                inputField.style.display = "none";
                selectField.style.display = "none";

                if (currentQuestion.type === "text" || currentQuestion.type === "number") {
                    inputField.type = currentQuestion.type;
                    inputField.style.display = "block";
                    inputField.value = answers[currentQuestion.id] || "";
                    inputField.required = true;
                } else if (currentQuestion.type === "select") {
                    selectField.innerHTML = "";
                    selectField.style.display = "block";
                    const defaultOption = document.createElement("option");
                    defaultOption.disabled = true;
                    defaultOption.selected = true;
                    defaultOption.text = "Choose...";
                    selectField.add(defaultOption);
                    currentQuestion.options.forEach(option => {
                        const optionElement = document.createElement("option");
                        optionElement.value = option;
                        optionElement.text = option;
                        selectField.add(optionElement);
                    });
                    selectField.value = answers[currentQuestion.id] || "";
                    selectField.required = true;
                }
                document.getElementById("submitButton").style.display = "block";
                document.getElementById("resetButton").style.display = "block";
            } else {
                document.getElementById("buttons-container").style.display = "block";
                addMessage("Thanks for providing all the details", "question");
                addMessage("Check 'Motivate me' to get motivated üßê", "question");
                addMessage("You can now proceed with generating the plan üí™", "question");
                document.getElementById("input-container").style.display = "none";
            }
        }

        function resetForm() {
            currentQuestionIndex = 0;
            answers = {};
            document.getElementById("conversation-container").innerHTML = "";
            document.getElementById("input-container").style.display = "block";
            document.getElementById("buttons-container").style.display = "none";
            document.getElementById("submitButton").style.display = "none";
            document.getElementById("resetButton").style.display = "none";
            showNextQuestion();
        }

        document.getElementById("submitButton").addEventListener("click", () => {
            const currentQuestion = questions[currentQuestionIndex];
            let answer = "";
            if (currentQuestion.type === "text" || currentQuestion.type === "number") {
                answer = document.getElementById("inputField").value;
                if (!answer) {
                    alert('Please fill out this field.');
                    return;
                }
                answers[currentQuestion.id] = answer;
            } else if (currentQuestion.type === "select") {
                answer = document.getElementById("selectField").value;
                if (!answer) {
                    alert('Please select an option.');
                    return;
                }
                answers[currentQuestion.id] = answer;
            }
            addMessage(answer, "answer");

            if (currentQuestion.id === "name") {
                addMessage(`Hi üëãüëã ${answer}!`, "question");
            }

            currentQuestionIndex++;
            setTimeout(() => {
                showNextQuestion();
            }, 600);
        });

        document.getElementById("resetButton").addEventListener("click", resetForm);

        document.getElementById("generatePlan").addEventListener("click", async () => {
            const age = answers.age;
            const height = answers.height;
            const weight = answers.weight;
            const month = answers.month;
            const gender = answers.gender;
            const level = answers.level;
            const isVegetarian = answers.vegetarian === "Yes";
            if (weight < 35) {
                alert("Weight is less than 35, going to the gym is not recommended for you");
            } else {
                document.getElementById('thinking-text').innerText = "Wait while we recommend an awesome plan for you ...";
                document.getElementById('loader').style.display = 'block';
                await run(age, height, weight, month, level, isVegetarian);
            }
        });

        document.getElementById("motivateMe").addEventListener("click", () => {
            const images = [
                'images/img1.jpg',
                'images/img2.jpg',
                'images/img3.jpg',
                'images/img4.jpg',
                'images/img5.jpg',
                'images/img6.jpg',
                'images/img7.jpg'
            ];
            let currentIndex = 0;
            function showImage() {
                const imgElement = document.createElement('img');
                imgElement.classList.add('motivation-img');
                imgElement.src = images[currentIndex];
                imgElement.alt = 'Motivational Image';
                const responseContainer = document.getElementById('response');
                responseContainer.innerHTML = '';
                responseContainer.appendChild(imgElement);
                currentIndex = (currentIndex + 1) % images.length;
            }
            showImage();
            setInterval(showImage, 2000);
        });

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        async function run(age, height, weight, month, level, isVegetarian) {
            try {
                const prompt = `Generate a personalized gym and diet plan for a ${age}-year-old individual, ${height} cm tall, weighing ${weight} kg, for ${month} months, fitness level: ${level}, vegetarian: ${isVegetarian}.`;
                const response = await model.generateText({ prompt });
                const generatedPlan = response.data.generations[0].text.trim();

                document.getElementById('thinking-text').innerText = "I'm your virtual fitness assistant";
                document.getElementById('loader').style.display = 'none';
                document.getElementById('response').innerHTML = `<pre>${generatedPlan}</pre>`;
            } catch (error) {
                console.error("Error generating text:", error);
                alert("Failed to generate the plan. Please try again.");
            }
        }

        resetForm();
    </script>
</body>
</html>
